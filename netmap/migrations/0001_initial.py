# Generated by Django 4.2.20 on 2025-04-01 18:14

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique identifier for the device', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the device')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('destination_network', models.CharField(help_text='Destination network in CIDR notation', max_length=18, validators=[django.core.validators.RegexValidator(message="Enter a valid CIDR notation (e.g., '192.168.24.0/24')", regex='^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$')])),
                ('gateway_ip', models.GenericIPAddressField(blank=True, help_text='Next hop gateway IP address', null=True)),
                ('type', models.CharField(choices=[('static', 'Static'), ('ospf', 'OSPF'), ('bgp', 'BGP'), ('connected', 'Connected'), ('rip', 'RIP'), ('eigrp', 'EIGRP'), ('other', 'Other')], default='static', help_text='Routing protocol or type', max_length=10)),
                ('metric', models.IntegerField(default=0, help_text='Routing metric/cost (lower is preferred)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_device', models.ForeignKey(help_text='The device this route is defined on', on_delete=django.db.models.deletion.CASCADE, related_name='routes', to='netmap.device')),
            ],
        ),
        migrations.CreateModel(
            name='NATMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logical_ip_or_network', models.CharField(help_text='Original IP or network (before NAT)', max_length=18)),
                ('real_ip_or_network', models.CharField(help_text='Translated IP or network (after NAT)', max_length=18)),
                ('type', models.CharField(choices=[('source', 'Source NAT'), ('destination', 'Destination NAT')], help_text="Type of NAT ('source' or 'destination')", max_length=11)),
                ('description', models.TextField(blank=True, help_text='Optional description of the NAT mapping')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(help_text='The device performing the NAT', on_delete=django.db.models.deletion.CASCADE, related_name='nat_mappings', to='netmap.device')),
            ],
        ),
        migrations.CreateModel(
            name='Interface',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Interface name (e.g., 'eth0', 'ge-0/0/0')", max_length=255)),
                ('ip_address', models.GenericIPAddressField(help_text='IP address assigned to this interface')),
                ('network', models.CharField(help_text="Network in CIDR notation (e.g., '192.168.24.0/24')", max_length=18, validators=[django.core.validators.RegexValidator(message="Enter a valid CIDR notation (e.g., '192.168.24.0/24')", regex='^([0-9]{1,3}\\.){3}[0-9]{1,3}/[0-9]{1,2}$')])),
                ('status', models.CharField(choices=[('up', 'Up'), ('down', 'Down')], default='up', help_text="Interface status ('up' or 'down')", max_length=4)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(help_text='The device this interface belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='interfaces', to='netmap.device')),
            ],
        ),
        migrations.AddConstraint(
            model_name='route',
            constraint=models.UniqueConstraint(fields=('source_device', 'destination_network', 'gateway_ip'), name='unique_device_route'),
        ),
        migrations.AddConstraint(
            model_name='interface',
            constraint=models.UniqueConstraint(fields=('device', 'name', 'ip_address'), name='unique_device_interface_ip'),
        ),
    ]
